name: Build (Multi OS & CPU)

on:
  push:
    branches: ["**"]
    tags: ["v*", "v*.*", "v*.*.*"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [
          x86_64-unknown-linux-gnu,
          aarch64-unknown-linux-gnu,
          armv7-unknown-linux-gnueabihf,
          i686-unknown-linux-gnu
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Install target-specific toolchains (Linux)
        shell: bash
        run: |
          sudo apt-get update
          case "${{ matrix.target }}" in
            aarch64-unknown-linux-gnu)
              sudo apt-get install -y gcc-aarch64-linux-gnu
              ;;
            armv7-unknown-linux-gnueabihf)
              sudo apt-get install -y gcc-arm-linux-gnueabihf
              ;;
            i686-unknown-linux-gnu)
              sudo apt-get install -y gcc-multilib
              ;;
            x86_64-unknown-linux-gnu)
              sudo apt-get install -y build-essential
              ;;
            *)
              echo "No extra packages for target=${{ matrix.target }}"
              ;;
          esac

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          BIN=target/${{ matrix.target }}/release/p2p_server
          OUT=p2p_server-${{ matrix.target }}-linux
          cp "$BIN" "$OUT"
          tar -czf "$OUT.tar.gz" "$OUT"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-linux
          path: |
            p2p_server-${{ matrix.target }}-linux.tar.gz

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [
          x86_64-apple-darwin,
          aarch64-apple-darwin
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          BIN=target/${{ matrix.target }}/release/p2p_server
          OUT=p2p_server-${{ matrix.target }}-macos
          cp "$BIN" "$OUT"
          tar -czf "$OUT.tar.gz" "$OUT"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-macos
          path: p2p_server-${{ matrix.target }}-macos.tar.gz

  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target: [
          x86_64-pc-windows-msvc,
          aarch64-pc-windows-msvc,
          i686-pc-windows-msvc
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: pwsh
        run: |
          $bin = "target/${{ matrix.target }}/release/p2p_server.exe"
          $out = "p2p_server-${{ matrix.target }}-windows.exe"
          Copy-Item $bin $out
          Compress-Archive -Path $out -DestinationPath "p2p_server-${{ matrix.target }}-windows.zip"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-windows
          path: p2p_server-${{ matrix.target }}-windows.zip

  release:
    runs-on: ubuntu-latest
    needs: [linux, macos, windows]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: p2p_server-*
          merge-multiple: true
          path: dist

      - name: Generate checksums
        run: |
          cd dist
          shopt -s nullglob
          sha256sum *.tar.gz *.zip > SHA256SUMS.txt

      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          files: |
            dist/**