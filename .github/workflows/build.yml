name: Build (Multi OS & CPU)

on:
  push:
    branches: ["**"]
    tags: ["v*", "v*.*", "v*.*.*"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  linux:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        experimental: [false]
        target: [
          x86_64-unknown-linux-gnu,
          x86_64-unknown-linux-musl,
          aarch64-unknown-linux-gnu,
          aarch64-unknown-linux-musl,
          armv7-unknown-linux-gnueabihf,
          i686-unknown-linux-gnu,
          riscv64gc-unknown-linux-gnu,
          powerpc64le-unknown-linux-gnu,
          s390x-unknown-linux-gnu
        ]
        include:
          - target: aarch64-linux-android
            experimental: true
          - target: armv7-linux-androideabi
            experimental: true
          # removed loongarch64 from ubuntu matrix; handled in fedora container job
          - target: powerpc-unknown-linux-gnu
            experimental: true
          - target: powerpc64-unknown-linux-gnu
            experimental: true
          - target: riscv32gc-unknown-linux-gnu
            experimental: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Install cross
        if: ${{ matrix.target != 'loongarch64-unknown-linux-gnu' }}
        run: cargo install cross

      - name: Install i686 cross toolchain (Ubuntu)
        if: ${{ matrix.target == 'i686-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-i686-linux-gnu libc6-dev-i386

      - name: Install aarch64 cross toolchain (Ubuntu)
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Install armv7 cross toolchain (Ubuntu)
        if: ${{ matrix.target == 'armv7-unknown-linux-gnueabihf' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-arm-linux-gnueabihf

      - name: Install loongarch64 cross toolchain (Ubuntu)
        if: ${{ matrix.target == 'loongarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-loongarch64-linux-gnu \
            binutils-loongarch64-linux-gnu \
            libc6-dev-loongarch64-cross

      - name: Build (cargo, no cross)
        if: ${{ matrix.target == 'loongarch64-unknown-linux-gnu' }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build with cross
        if: ${{ matrix.target != 'loongarch64-unknown-linux-gnu' }}
        run: cross build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          BIN=target/${{ matrix.target }}/release/p2p_server
          case "${{ matrix.target }}" in
            *-android)
              SUFFIX=android
              ;;
            *)
              SUFFIX=linux
              ;;
          esac
          OUT=p2p_server-${{ matrix.target }}-${SUFFIX}
          cp "$BIN" "$OUT"
          tar -czf "$OUT.tar.gz" "$OUT"

      - name: Upload binary artifact (Android)
        if: ${{ endsWith(matrix.target, 'android') }}
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-android
          path: p2p_server-${{ matrix.target }}-android.tar.gz

      - name: Upload binary artifact (Linux)
        if: ${{ !endsWith(matrix.target, 'android') }}
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-linux
          path: p2p_server-${{ matrix.target }}-linux.tar.gz

  linux_loongarch:
    runs-on: ubuntu-latest
    container: fedora:39
    strategy:
      fail-fast: false
      matrix:
        target: [
          loongarch64-unknown-linux-gnu
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: 安装宿主编译器 (Fedora)
        run: |
          dnf install -y gcc gcc-c++ glibc-devel make pkgconf-pkg-config

      - name: 获取并配置龙芯交叉工具链
        shell: bash
        run: |
          set -euo pipefail
          dnf install -y curl jq tar xz
          ASSET=$(curl -sL https://api.github.com/repos/loongson/build-tools/releases/latest | jq -r '.assets[].name' | grep -E '^x86_64-cross-tools-loongarch64-.*\.tar\.xz' | head -n1)
          URL=$(curl -sL https://api.github.com/repos/loongson/build-tools/releases/latest | jq -r ".assets[] | select(.name==\"$ASSET\") | .browser_download_url")
          echo "Downloading: $ASSET"
          curl -L -o /tmp/$ASSET "$URL"
          mkdir -p /opt/loongarch64-toolchain
          tar -xJf /tmp/$ASSET -C /opt/loongarch64-toolchain --strip-components=1
          echo "提取后的目录结构:"; ls -la /opt/loongarch64-toolchain || true; ls -la /opt/loongarch64-toolchain/cross-tools || true; ls -la /opt/loongarch64-toolchain/cross-tools/bin || true
          # 自动探测 gcc 路径（兼容 unknown/linux 前缀 & 根/bin 或 cross-tools/bin 布局）
          CC_PATH=""
          for c in \
            "/opt/loongarch64-toolchain/cross-tools/bin/loongarch64-unknown-linux-gnu-gcc" \
            "/opt/loongarch64-toolchain/cross-tools/bin/loongarch64-linux-gnu-gcc" \
            "/opt/loongarch64-toolchain/bin/loongarch64-unknown-linux-gnu-gcc" \
            "/opt/loongarch64-toolchain/bin/loongarch64-linux-gnu-gcc"; do
            if [ -x "$c" ]; then CC_PATH="$c"; break; fi
          done
          if [ -z "$CC_PATH" ]; then
            CC_PATH=$(find /opt/loongarch64-toolchain -maxdepth 4 -type f -name 'loongarch64*-linux-gnu-gcc' | head -n1 || true)
          fi
          if [ -z "$CC_PATH" ]; then
            echo "未找到 loongarch64 gcc，可疑的目录结构如下："; ls -R /opt/loongarch64-toolchain; exit 1
          fi
          TOOLCHAIN_BIN=$(dirname "$CC_PATH")
          PREFIX=$(basename "$CC_PATH" | sed 's/-gcc$//')
          CXX_PATH="$TOOLCHAIN_BIN/${PREFIX}-g++"
          AR_PATH="$TOOLCHAIN_BIN/${PREFIX}-ar"
          RANLIB_PATH="$TOOLCHAIN_BIN/${PREFIX}-ranlib"
          # 可能只有 gcc-ar / gcc-ranlib，做兼容回退
          if [ ! -x "$AR_PATH" ] && [ -x "$TOOLCHAIN_BIN/${PREFIX}-gcc-ar" ]; then AR_PATH="$TOOLCHAIN_BIN/${PREFIX}-gcc-ar"; fi
          if [ ! -x "$RANLIB_PATH" ] && [ -x "$TOOLCHAIN_BIN/${PREFIX}-gcc-ranlib" ]; then RANLIB_PATH="$TOOLCHAIN_BIN/${PREFIX}-gcc-ranlib"; fi
          echo "$TOOLCHAIN_BIN" >> $GITHUB_PATH
          echo "Using toolchain bin: $TOOLCHAIN_BIN"
          echo "Using toolchain prefix: $PREFIX"
          # 为 Rust/Cargo 与 cc crate 设置目标专用变量
          echo "CARGO_TARGET_LOONGARCH64_UNKNOWN_LINUX_GNU_LINKER=$CC_PATH" >> $GITHUB_ENV
          echo "CC_loongarch64_unknown_linux_gnu=$CC_PATH" >> $GITHUB_ENV
          echo "CXX_loongarch64_unknown_linux_gnu=$CXX_PATH" >> $GITHUB_ENV
          echo "AR_loongarch64_unknown_linux_gnu=$AR_PATH" >> $GITHUB_ENV
          echo "RANLIB_loongarch64_unknown_linux_gnu=$RANLIB_PATH" >> $GITHUB_ENV
          "$CC_PATH" --version

      - name: Build (cargo)
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          BIN=target/${{ matrix.target }}/release/p2p_server
          OUT=p2p_server-${{ matrix.target }}-linux
          cp "$BIN" "$OUT"
          tar -czf "$OUT.tar.gz" "$OUT"

      - name: Upload binary artifact (Linux)
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-linux
          path: p2p_server-${{ matrix.target }}-linux.tar.gz

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [
          x86_64-apple-darwin,
          aarch64-apple-darwin
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          BIN=target/${{ matrix.target }}/release/p2p_server
          OUT=p2p_server-${{ matrix.target }}-macos
          cp "$BIN" "$OUT"
          tar -czf "$OUT.tar.gz" "$OUT"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-macos
          path: p2p_server-${{ matrix.target }}-macos.tar.gz

  windows:
    runs-on: windows-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        experimental: [false]
        target: [
          x86_64-pc-windows-msvc,
          aarch64-pc-windows-msvc,
          i686-pc-windows-msvc,
          x86_64-pc-windows-gnu
        ]
        include:
          - target: i686-pc-windows-gnu
            experimental: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Setup MSYS2 for MinGW (GNU, x86_64)
        if: ${{ matrix.target == 'x86_64-pc-windows-gnu' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-pkg-config

      - name: Setup MSYS2 for MinGW (GNU, i686)
        if: ${{ matrix.target == 'i686-pc-windows-gnu' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW32
          update: true
          install: >-
            mingw-w64-i686-toolchain
            mingw-w64-i686-pkg-config
      - name: Configure GNU i686 linker
        if: ${{ matrix.target == 'i686-pc-windows-gnu' }}
        shell: pwsh
        run: |
          "CARGO_TARGET_I686_PC_WINDOWS_GNU_LINKER=i686-w64-mingw32-gcc" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: pwsh
        run: |
          $bin = "target/${{ matrix.target }}/release/p2p_server.exe"
          $out = "p2p_server-${{ matrix.target }}-windows.exe"
          Copy-Item $bin $out
          Compress-Archive -Path $out -DestinationPath "p2p_server-${{ matrix.target }}-windows.zip"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-windows
          path: p2p_server-${{ matrix.target }}-windows.zip

  release:
    runs-on: ubuntu-latest
    needs: [linux, linux_loongarch, macos, windows]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: p2p_server-*
          merge-multiple: true
          path: dist

      - name: Generate checksums
        run: |
          cd dist
          shopt -s nullglob
          sha256sum *.tar.gz *.zip > SHA256SUMS.txt

      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          files: |
            dist/**