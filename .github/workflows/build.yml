name: Build (Multi OS & CPU)

on:
  push:
    branches: ["**"]
    tags: ["v*", "v*.*", "v*.*.*"]
  pull_request:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  linux:
    runs-on: ubuntu-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        experimental: [false]
        target: [
          x86_64-unknown-linux-gnu,
          x86_64-unknown-linux-musl,
          aarch64-unknown-linux-gnu,
          aarch64-unknown-linux-musl,
          armv7-unknown-linux-gnueabihf,
          i686-unknown-linux-gnu,
          riscv64gc-unknown-linux-gnu,
          powerpc64le-unknown-linux-gnu,
          s390x-unknown-linux-gnu
        ]
        include:
          - target: aarch64-linux-android
            experimental: true
          - target: armv7-linux-androideabi
            experimental: true
          - target: loongarch64-unknown-linux-gnu
            experimental: true
          - target: mips-unknown-linux-gnu
            experimental: true
          - target: mipsel-unknown-linux-gnu
            experimental: true
          - target: mips64-unknown-linux-gnuabi64
            experimental: true
          - target: mips64el-unknown-linux-gnuabi64
            experimental: true
          - target: powerpc-unknown-linux-gnu
            experimental: true
          - target: powerpc64-unknown-linux-gnu
            experimental: true
          - target: riscv32gc-unknown-linux-gnu
            experimental: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Install cross
        run: cargo install cross

      - name: Build with cross
        run: cross build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          BIN=target/${{ matrix.target }}/release/p2p_server
          case "${{ matrix.target }}" in
            *-android)
              SUFFIX=android
              ;;
            *)
              SUFFIX=linux
              ;;
          esac
          OUT=p2p_server-${{ matrix.target }}-${SUFFIX}
          cp "$BIN" "$OUT"
          tar -czf "$OUT.tar.gz" "$OUT"

      - name: Upload binary artifact (Android)
        if: ${{ endsWith(matrix.target, 'android') }}
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-android
          path: p2p_server-${{ matrix.target }}-android.tar.gz

      - name: Upload binary artifact (Linux)
        if: ${{ !endsWith(matrix.target, 'android') }}
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-linux
          path: p2p_server-${{ matrix.target }}-linux.tar.gz

  macos:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        target: [
          x86_64-apple-darwin,
          aarch64-apple-darwin
        ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: bash
        run: |
          BIN=target/${{ matrix.target }}/release/p2p_server
          OUT=p2p_server-${{ matrix.target }}-macos
          cp "$BIN" "$OUT"
          tar -czf "$OUT.tar.gz" "$OUT"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-macos
          path: p2p_server-${{ matrix.target }}-macos.tar.gz

  windows:
    runs-on: windows-latest
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        experimental: [false]
        target: [
          x86_64-pc-windows-msvc,
          aarch64-pc-windows-msvc,
          i686-pc-windows-msvc,
          x86_64-pc-windows-gnu
        ]
        include:
          - target: i686-pc-windows-gnu
            experimental: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache Cargo
        uses: Swatinem/rust-cache@v2

      - name: Setup MSYS2 for MinGW (GNU, x86_64)
        if: ${{ matrix.target == 'x86_64-pc-windows-gnu' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-pkg-config

      - name: Setup MSYS2 for MinGW (GNU, i686)
        if: ${{ matrix.target == 'i686-pc-windows-gnu' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW32
          update: true
          install: >-
            mingw-w64-i686-gcc
            mingw-w64-i686-pkg-config

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package artifact
        shell: pwsh
        run: |
          $bin = "target/${{ matrix.target }}/release/p2p_server.exe"
          $out = "p2p_server-${{ matrix.target }}-windows.exe"
          Copy-Item $bin $out
          Compress-Archive -Path $out -DestinationPath "p2p_server-${{ matrix.target }}-windows.zip"

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: p2p_server-${{ matrix.target }}-windows
          path: p2p_server-${{ matrix.target }}-windows.zip

  release:
    runs-on: ubuntu-latest
    needs: [linux, macos, windows]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: p2p_server-*
          merge-multiple: true
          path: dist

      - name: Generate checksums
        run: |
          cd dist
          shopt -s nullglob
          sha256sum *.tar.gz *.zip > SHA256SUMS.txt

      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: true
          files: |
            dist/**